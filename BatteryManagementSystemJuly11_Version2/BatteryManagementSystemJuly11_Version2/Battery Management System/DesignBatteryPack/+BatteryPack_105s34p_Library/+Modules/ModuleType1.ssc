component ModuleType1
    % ModuleType1:2
    % Module Block
    %    Model resolution: Detailed
    %    Number of parallel assemblies: 3
    %    Number of cells per parallel assembly: 34
    %
    %    MATLAB version: 23.2
    %    Simscape Battery version: 23.2
    %    Simscape code generated on: 11-Jul-2025 21:23:03

    parameters
        SOC_vecCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % Vector of state-of-charge values, SOC
        T_vecCell = {[278, 293, 313],'K'}; % Vector of temperatures, T
        V0_matCell = {[3.49, 3.5, 3.51; 3.55, 3.57, 3.56; 3.62, 3.63, 3.64; 3.71, 3.71, 3.72; 3.91, 3.93, 3.94; 4.07, 4.08, 4.08; 4.19, 4.19, 4.19],'V'}; % Open-circuit voltage, V0(SOC,T)
        V_rangeCell = {[0, inf],'V'}; % Terminal voltage operating range [Min Max]
        R0_matCell = {[.0117, .0085, .009; .011, .0085, .009; .0114, .0087, .0092; .0107, .0082, .0088; .0107, .0083, .0091; .0113, .0085, .0089; .0116, .0085, .0089],'Ohm'}; % Terminal resistance, R0(SOC,T)
        AHCell = {27,'A*hr'}; % Cell capacity, AH
        extrapolation_optionCell = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        thermal_massCell = {100,'J/K'}; % Thermal mass
        CellBalancingClosedResistance = {0.01,'Ohm'}; % Cell balancing switch closed resistance
        CellBalancingOpenConductance = {1e-8,'1/Ohm'}; % Cell balancing switch open conductance
        CellBalancingThreshold = {0.5,'1'}; % Cell balancing switch operation threshold
        CellBalancingResistance = {50,'Ohm'}; % Cell balancing shunt resistance
        CoolantResistance = {1.2,'K/W'}; % Cell level coolant thermal path resistance
    end

    parameters(ExternalAccess=none)
        P = 34; % Batteries in Parallel
        S = 3; % Batteries in Series
        CellCount = P*S; % Number of cells in battery
    end

    parameters(Access=private)
        CoolantResistanceScaled = CoolantResistance .* ones(1,P*S); % Scaled cell level coolant thermal path resistance
    end

    inputs
        enableCellBalancing = {repmat(0,S,1),'1'}; % CB
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
        ClntH = foundation.thermal.thermal; % ClntH
    end

    variables
        iCell = {repmat(0,102,1),'A'}; % Cell current (positive in)
        vCell = {repmat(0,102,1),'V'}; % Cell terminal voltage
        socCell = {value={repmat(1,102,1),'1'},priority=priority.high}; % Cell state of charge
        numCyclesCell = {value={repmat(0,102,1),'1'},priority=priority.high}; % Cell discharge cycles
        temperatureCell = {value={repmat(298.15,102,1),'K'},priority=priority.high}; % Cell temperature
        vParallelAssembly = {value={repmat(0,3,1),'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={repmat(1,3,1),'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    equations
        assert(length(iCell) == CellCount);
        assert(length(vCell) == CellCount);
        assert(length(socCell) == CellCount);
        assert(length(numCyclesCell) == CellCount);
        assert(length(temperatureCell) == CellCount);
        assert(length(vParallelAssembly) == S);
        assert(length(socParallelAssembly) == S);
        assert(isequal(size(CoolantResistance),[1,1]) || isequal(size(CoolantResistance),[1,P*S]),...
            'Cell level coolant thermal path resistance must be either a scalar or a row vector. The size of this vector must be equal to the number of cells modeled by the block');
    end

    connections
        connect(p,ParallelAssembly1(1).p);
        connect(n,ParallelAssembly1(end).n);
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        UILayout = [UIGroup("Main",SOC_vecCell,T_vecCell,V0_matCell,V_rangeCell,R0_matCell,AHCell,extrapolation_optionCell),...
            UIGroup("Thermal",thermal_massCell,CoolantResistance),...
            UIGroup("Cell Balancing",CellBalancingClosedResistance,CellBalancingOpenConductance,CellBalancingThreshold,CellBalancingResistance)];
        Icon = 'module.svg';
    end

    for Sidx = 1:S
        components(ExternalAccess=observe,CompileReuse=true)
            ParallelAssembly1(Sidx) = BatteryPack_105s34p_Library.ParallelAssemblies.ParallelAssemblyType1(...
                P = P,SOC_vecCell = SOC_vecCell,...
                T_vecCell = T_vecCell,V0_matCell = V0_matCell,V_rangeCell = V_rangeCell,...
                R0_matCell = R0_matCell,AHCell = AHCell,...
                extrapolation_optionCell = extrapolation_optionCell,thermal_massCell = thermal_massCell,...
                CellBalancingClosedResistance = CellBalancingClosedResistance,...
                CellBalancingOpenConductance = CellBalancingOpenConductance,CellBalancingThreshold = CellBalancingThreshold,...
                CellBalancingResistance = CellBalancingResistance,...
                CoolantResistance = CoolantResistanceScaled(((Sidx-1)*P+1):(Sidx*P)),...
                iCell.priority = priority.none,vCell.priority = priority.none,socCell.priority = priority.none,...
                numCyclesCell.priority = priority.none,...
                temperatureCell.priority = priority.none,vParallelAssembly.priority = priority.none,...
                socParallelAssembly.priority = priority.none);
        end
    end

    for Sidx = 1:S-1
        connections
            connect(ParallelAssembly1(Sidx).n,ParallelAssembly1(Sidx+1).p);
        end
    end

    for Sidx = 1:S
        equations
            ParallelAssembly1(Sidx).iCell == reshape(iCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly1(Sidx).vCell == reshape(vCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly1(Sidx).socCell == reshape(socCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly1(Sidx).numCyclesCell == reshape(numCyclesCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly1(Sidx).temperatureCell == reshape(temperatureCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly1(Sidx).vParallelAssembly == vParallelAssembly(Sidx);
            ParallelAssembly1(Sidx).socParallelAssembly == socParallelAssembly(Sidx);
        end
    end

    for Sidx = 1:S
        connections
            connect(enableCellBalancing(Sidx),ParallelAssembly1(Sidx).enableCellBalancing);
        end
    end

    for Sidx = 1:S
        connections
            connect(ParallelAssembly1(Sidx).ClntH,ClntH);
        end
    end
end